// Generated by gencpp from file initials/Quaternion_Angles.msg
// DO NOT EDIT!


#ifndef INITIALS_MESSAGE_QUATERNION_ANGLES_H
#define INITIALS_MESSAGE_QUATERNION_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace initials
{
template <class ContainerAllocator>
struct Quaternion_Angles_
{
  typedef Quaternion_Angles_<ContainerAllocator> Type;

  Quaternion_Angles_()
    : X_quaternion(0)
    , Y_quaternion(0)
    , Z_quaternion(0)
    , W_quaternion(0)  {
    }
  Quaternion_Angles_(const ContainerAllocator& _alloc)
    : X_quaternion(0)
    , Y_quaternion(0)
    , Z_quaternion(0)
    , W_quaternion(0)  {
  (void)_alloc;
    }



   typedef int64_t _X_quaternion_type;
  _X_quaternion_type X_quaternion;

   typedef int64_t _Y_quaternion_type;
  _Y_quaternion_type Y_quaternion;

   typedef int64_t _Z_quaternion_type;
  _Z_quaternion_type Z_quaternion;

   typedef int64_t _W_quaternion_type;
  _W_quaternion_type W_quaternion;





  typedef boost::shared_ptr< ::initials::Quaternion_Angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::initials::Quaternion_Angles_<ContainerAllocator> const> ConstPtr;

}; // struct Quaternion_Angles_

typedef ::initials::Quaternion_Angles_<std::allocator<void> > Quaternion_Angles;

typedef boost::shared_ptr< ::initials::Quaternion_Angles > Quaternion_AnglesPtr;
typedef boost::shared_ptr< ::initials::Quaternion_Angles const> Quaternion_AnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::initials::Quaternion_Angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::initials::Quaternion_Angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace initials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'turtlesim': ['/opt/ros/kinetic/share/turtlesim/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'initials': ['/home/bishop/Aws/src/initials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::initials::Quaternion_Angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::initials::Quaternion_Angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::initials::Quaternion_Angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::initials::Quaternion_Angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::initials::Quaternion_Angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::initials::Quaternion_Angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::initials::Quaternion_Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "292272218170789099d95a650288f820";
  }

  static const char* value(const ::initials::Quaternion_Angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2922722181707890ULL;
  static const uint64_t static_value2 = 0x99d95a650288f820ULL;
};

template<class ContainerAllocator>
struct DataType< ::initials::Quaternion_Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "initials/Quaternion_Angles";
  }

  static const char* value(const ::initials::Quaternion_Angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::initials::Quaternion_Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 X_quaternion\n\
int64 Y_quaternion\n\
int64 Z_quaternion\n\
int64 W_quaternion\n\
";
  }

  static const char* value(const ::initials::Quaternion_Angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::initials::Quaternion_Angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X_quaternion);
      stream.next(m.Y_quaternion);
      stream.next(m.Z_quaternion);
      stream.next(m.W_quaternion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Quaternion_Angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::initials::Quaternion_Angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::initials::Quaternion_Angles_<ContainerAllocator>& v)
  {
    s << indent << "X_quaternion: ";
    Printer<int64_t>::stream(s, indent + "  ", v.X_quaternion);
    s << indent << "Y_quaternion: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Y_quaternion);
    s << indent << "Z_quaternion: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Z_quaternion);
    s << indent << "W_quaternion: ";
    Printer<int64_t>::stream(s, indent + "  ", v.W_quaternion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INITIALS_MESSAGE_QUATERNION_ANGLES_H
